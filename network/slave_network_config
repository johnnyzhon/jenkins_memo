环境：
1. 宿主机为centos;
2. 宿主机安装了ovs，pipework；
3. 宿主机有2个网口（eth0 有ip地址，和外部网络相通，eth1连接猫墙交换机）


测试机网络规划方案（ovs)：

1.  测试机以容器的形式部署在一台或多台服务器上。
2.  测试机添加第二个网口，并将第二个网口接入 ovs switch
3.  ovs上给测试机划分不同的vlan, 测试机第二个网口ip网段 192.168.1.*
4.  宿主机eth1端口接入ovs， 注意接入后eth1 ip会失效，请在服务器本地登录，并记录下当前的route表
5.  然后把 eth1的ip地址配给 ovs internal port 
6.  然后给ovs internal port配置 eth1上面的路由 
7.  测试机缺省的第一个网口通过端口映射方式可以访问外部网络。

详细步骤：
1. 获取容器的PID
# docker inspect -f '{{.State.Pid}}' ${agent_name}  
2. 为容器添加网络接口eth1
(1) 创建一对 veth peer设备	
# ip link add $veth0 type veth peer name $veth1  \\删除命令ip link del veth0
(2) 创建ovs网桥ovs0
# ovs-vsctl add-br $ovsbr 
# ovs−vsctl set bridge $ovsbr stp_enable=true \\避免广播风暴
# ip link set ovs0 up
(3) 将veth一端添加到网桥
# ovs-vsctl add-port $ovs $veth0
# ip link set $veth0 up
(4) 将veth另一端与容器关联 
# ln -s /proc/$pid/ns/net /var/run/netns/$pid
# ip link set $veth1 netns $pid
(5) 配置容器新添加的网络接口
# ip netns exec $pid ip link set dev $veth1 name eth1
# ip netns exec $pid ip addr add $eth1_ip/$netmask dev eth1
# ip netns exec $pid ip link set eth1 up

3. 为容器网口设置vlan
# ovs-vsctl set port $veth0 tag=20

4. 宿主机网口eth1桥接到ovs0 
# ovs-vsctl add-port $ovsbr eth1

Q&A:
1. linux上给网口新增/删除 ip？
#ip addr add 192.168.1.100/24 dev eth0
#ip addr del 192.168.1.100/24 dev eth0

2. 停止与激活网络设备
#ip link set dev eth1 down
#ip link set dev eth1 up

3. 创建ovs bridge
# ovs-vsctl add-br ovs0

4. 给ovs br 添加/删除 port
# ovs-vsctl add-port ovs0 ens*
# ovs-vsctl del-port ovs0 ens*

5. 给port口设置vlan
# pipework ovs0 test1 192.168.1.11/24 @10  \\ ovs0 网桥， test1 虚机或容器 ， vlan :10

pipework本质是一个shell脚本实现，相对docker自身比较薄弱的网络配置处理方式，其可以方便地对docker网络进行配置。
[root@localhost ~]# cd /usr/local/
[root@localhost local]# git clone https://github.com/jpetazzo/pipework
[root@localhost local]# ln -s /usr/local/pipework/pipework /usr/local/bin/ 

6. 查看网桥配置信息
# ovs-vsctl list bridge s1

7. 查看网桥端口配置信息
#ovs-vsctl list port s1 s1-eth1 

8. 创建虚拟vlan子网口
#ip link add link eth0 name eth0.10 type vlan id 10
#ip link set dev eth0.10 up


